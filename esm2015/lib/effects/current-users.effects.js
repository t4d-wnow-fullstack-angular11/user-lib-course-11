import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { UsersService } from '../services/users.service';
import { of } from 'rxjs';
import { exhaustMap, mergeMap, catchError } from 'rxjs/operators';
import { setCurrentUser, clearCurrentUser } from '../actions/current-user.actions';
import { setErrorMessage, clearErrorMessage } from '@t4d-wnow/shared-lib';
export class CurrentUserEffects {
    constructor(actions$, usersSvc) {
        this.actions$ = actions$;
        this.usersSvc = usersSvc;
        this.logoutUser$ = createEffect(() => this.actions$.pipe(ofType('[UserLib] Logout User'), mergeMap(() => of(clearErrorMessage(), clearCurrentUser()))));
        this.loginUser$ = createEffect(() => this.actions$.pipe(ofType('[UserLib] Login User'), exhaustMap((action) => this.usersSvc.loginEmployee(action.username, action.password).pipe(mergeMap(() => {
            return of(setCurrentUser({ currentUser: this.usersSvc.getCurrentUser() }), clearErrorMessage());
        }), catchError((err) => {
            if (err.status === 404) {
                return of(setErrorMessage({ errorMessage: 'Username and password not found.' }), clearCurrentUser());
            }
            else {
                return of(setErrorMessage({ errorMessage: 'Unknown login error.' }), clearCurrentUser());
            }
        })))));
    }
}
CurrentUserEffects.decorators = [
    { type: Injectable }
];
CurrentUserEffects.ctorParameters = () => [
    { type: Actions },
    { type: UsersService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC11c2Vycy5lZmZlY3RzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL3VzZXItbGliL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9lZmZlY3RzL2N1cnJlbnQtdXNlcnMuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUxQixPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHbkYsT0FBTyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRzFFLE1BQU0sT0FBTyxrQkFBa0I7SUFzQzdCLFlBQ1UsUUFBaUIsRUFDakIsUUFBc0I7UUFEdEIsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixhQUFRLEdBQVIsUUFBUSxDQUFjO1FBdENoQyxnQkFBVyxHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDakQsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEVBQy9CLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQ2YsaUJBQWlCLEVBQUUsRUFDbkIsZ0JBQWdCLEVBQUUsQ0FDbkIsQ0FBQyxDQUNILENBQUMsQ0FBQztRQUVILGVBQVUsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxFQUM5QixVQUFVLENBQUMsQ0FBQyxNQUE4QyxFQUFFLEVBQUUsQ0FDNUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNoRSxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ1osT0FBTyxFQUFFLENBQ1AsY0FBYyxDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFrQixFQUFFLENBQUMsRUFDL0UsaUJBQWlCLEVBQUUsQ0FDcEIsQ0FBQztRQUNKLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBRXRCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQ3RCLE9BQU8sRUFBRSxDQUNQLGVBQWUsQ0FBQyxFQUFFLFlBQVksRUFBRSxrQ0FBa0MsRUFBRSxDQUFDLEVBQ3JFLGdCQUFnQixFQUFFLENBQ25CLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FDUCxlQUFlLENBQUMsRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxFQUN6RCxnQkFBZ0IsRUFBRSxDQUNuQixDQUFDO2FBQ0g7UUFFSCxDQUFDLENBQUMsQ0FDSCxDQUFDLENBQ0wsQ0FBQyxDQUFDO0lBS0MsQ0FBQzs7O1lBMUNOLFVBQVU7OztZQVZGLE9BQU87WUFDUCxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgY3JlYXRlRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IFVzZXJzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3VzZXJzLnNlcnZpY2UnO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgZXhoYXVzdE1hcCwgbWVyZ2VNYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBzZXRDdXJyZW50VXNlciwgY2xlYXJDdXJyZW50VXNlciB9IGZyb20gJy4uL2FjdGlvbnMvY3VycmVudC11c2VyLmFjdGlvbnMnO1xuaW1wb3J0IHsgSUN1cnJlbnRVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL0N1cnJlbnRVc2VyJztcblxuaW1wb3J0IHsgc2V0RXJyb3JNZXNzYWdlLCBjbGVhckVycm9yTWVzc2FnZSB9IGZyb20gJ0B0NGQtd25vdy9zaGFyZWQtbGliJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEN1cnJlbnRVc2VyRWZmZWN0cyB7XG5cbiAgbG9nb3V0VXNlciQgPSBjcmVhdGVFZmZlY3QoKCkgPT4gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZSgnW1VzZXJMaWJdIExvZ291dCBVc2VyJyksXG4gICAgbWVyZ2VNYXAoKCkgPT4gb2YoXG4gICAgICBjbGVhckVycm9yTWVzc2FnZSgpLFxuICAgICAgY2xlYXJDdXJyZW50VXNlcigpLFxuICAgICkpLFxuICApKTtcblxuICBsb2dpblVzZXIkID0gY3JlYXRlRWZmZWN0KCgpID0+IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoJ1tVc2VyTGliXSBMb2dpbiBVc2VyJyksXG4gICAgZXhoYXVzdE1hcCgoYWN0aW9uOiB7IHVzZXJuYW1lOiBzdHJpbmcsICBwYXNzd29yZDogc3RyaW5nfSkgPT5cbiAgICAgIHRoaXMudXNlcnNTdmMubG9naW5FbXBsb3llZShhY3Rpb24udXNlcm5hbWUsIGFjdGlvbi5wYXNzd29yZCkucGlwZShcbiAgICAgICAgbWVyZ2VNYXAoKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBvZihcbiAgICAgICAgICAgIHNldEN1cnJlbnRVc2VyKHsgY3VycmVudFVzZXI6IHRoaXMudXNlcnNTdmMuZ2V0Q3VycmVudFVzZXIoKSBhcyBJQ3VycmVudFVzZXIgfSksXG4gICAgICAgICAgICBjbGVhckVycm9yTWVzc2FnZSgpLFxuICAgICAgICAgICk7XG4gICAgICAgIH0pLFxuICAgICAgICBjYXRjaEVycm9yKChlcnI6IGFueSkgPT4ge1xuXG4gICAgICAgICAgaWYgKGVyci5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgcmV0dXJuIG9mKFxuICAgICAgICAgICAgICBzZXRFcnJvck1lc3NhZ2UoeyBlcnJvck1lc3NhZ2U6ICdVc2VybmFtZSBhbmQgcGFzc3dvcmQgbm90IGZvdW5kLicgfSksXG4gICAgICAgICAgICAgIGNsZWFyQ3VycmVudFVzZXIoKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvZihcbiAgICAgICAgICAgICAgc2V0RXJyb3JNZXNzYWdlKHsgZXJyb3JNZXNzYWdlOiAnVW5rbm93biBsb2dpbiBlcnJvci4nIH0pLFxuICAgICAgICAgICAgICBjbGVhckN1cnJlbnRVc2VyKCksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KSxcbiAgICAgICkpLFxuICApKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxuICAgIHByaXZhdGUgdXNlcnNTdmM6IFVzZXJzU2VydmljZSxcbiAgKSB7IH1cbn0iXX0=