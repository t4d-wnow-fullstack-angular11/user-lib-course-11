{"version":3,"sources":["../esm2015/projects/user-lib/src/lib/components/change-password-form/change-password-form.component.ts","../projects/user-lib/src/lib/models/CurrentUser.ts","../projects/user-lib/src/lib/services/users.service.ts","../esm2015/projects/user-lib/src/lib/components/current-user/current-user.component.ts","../esm2015/projects/user-lib/src/lib/components/login-form/login-form.component.ts","../esm2015/projects/user-lib/src/lib/components/user-profile/user-profile.component.ts","../projects/user-lib/src/lib/actions/current-user.actions.ts","../projects/user-lib/src/lib/reducers/current-user.reducer.ts","../projects/user-lib/src/lib/effects/current-users.effects.ts","../../projects/user-lib/src/lib/user-lib.module.ts","../projects/user-lib/src/lib/selectors/current-user.selectors.ts","../projects/user-lib/src/lib/services/allowed-roles-guard.service.ts","../projects/user-lib/src/lib/services/authorization-interceptor.service.ts","../projects/user-lib/src/lib/services/logged-in-guard.service.ts"],"names":["ChangePasswordFormComponent","fb","this","changePassword","EventEmitter","prototype","ngOnInit","changePasswordForm","group","currentPassword","newPassword","confirmPassword","validators","confirmValue","doChangePassword","valid","emit","value","Component","args","selector","template","FormBuilder","Output","CurrentUser","username","userKind","displayName","roles","addRole","roleName","Error","push","hasRole","roleNames","intersection","length","UsersService","httpClient","accessToken","currentUser","loginEmployee","password","_this","post","kind","pipe","tap","userResult","localStorage","refreshToken","map","forEach","role","refreshUser","get","userRefresh","of","oldPassword","getCurrentUser","getAccessToken","getRefreshToken","logoutUser","Injectable","providedIn","HttpClient","CurrentUserComponent","router","usersSvc","Object","defineProperty","_b","_a","navigateToProfile","navigateByUrl","navigateToLogout","navigateToLogin","Router","LoginFormComponent","loginFormSubmitted","login","clear","loginForm","invalid","Validators","required","doLogin","doClear","reset","UserProfileComponent","userProfile","Input","setCurrentUser","createAction","props","clearCurrentUser","loginUser","initialState","currentUserReducer","createReducer","on","_","actions$","logoutUser$","createEffect","ofType","mergeMap","clearErrorMessage","loginUser$","exhaustMap","action","catchError","err","status","setErrorMessage","errorMessage","Actions","StoreFeatureModule","StoreModule","forFeature","EffectsFeatureModule","EffectsModule","CurrentUserEffects","NgModule","declarations","imports","CommonModule","ReactiveFormsModule","HttpClientModule","MatListModule","MatToolbarModule","MatSidenavModule","MatButtonModule","MatIconModule","MatCardModule","MatFormFieldModule","MatInputModule","MatMenuModule","MatTableModule","MatSnackBarModule","exports","state","user","ɵ1$1","selectCurrentUser","createSelector","ɵ0$1","AllowedRolesGuardService","snackBar","canActivate","route","data","snackBarRef_1","open","title","onAction","subscribe","dismiss","MatSnackBar","AuthorizationInterceptorService","withAccessToken","req","clone","headers","set","withRefreshToken","method","intercept","next","url","endsWith","handle","caught","HttpErrorResponse","switchMap","throwError","LoggedInGuardService","parseUrl"],"mappings":"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","sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\nimport { ChangePasswordForm } from '../../models/ChangePasswordForm';\nimport { confirmValue } from '@t4d-wnow/shared-lib';\n\n@Component({\n  selector: 'app-change-password-form',\n  templateUrl: './change-password-form.component.html',\n  styleUrls: ['./change-password-form.component.css']\n})\nexport class ChangePasswordFormComponent implements OnInit {\n\n  @Output()\n  changePassword = new EventEmitter<ChangePasswordForm>();\n\n  changePasswordForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.changePasswordForm = this.fb.group({\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n    }, { validators: [confirmValue('newPassword', 'confirmPassword')] });\n  }\n\n  public doChangePassword() {\n    if (this.changePasswordForm.valid) {\n      this.changePassword.emit(this.changePasswordForm.value);\n    }\n  }\n\n}\n","import { intersection } from 'lodash-es';\n\nexport interface ICurrentUser {\n  username: string;\n  userKind: string;\n  displayName: string;\n  roles: string[];\n}\n\nexport class CurrentUser implements ICurrentUser {\n\n  public username: string;\n  public userKind: string;\n  public displayName: string;\n  public roles: string[];\n\n  constructor(username: string, userKind: string, displayName: string) {\n    this.username = username;\n    this.userKind = userKind;\n    this.displayName = displayName;\n    this.roles = [];\n  }\n\n  public addRole(roleName: string): CurrentUser {\n    if (!roleName) throw new Error('role name cannot be empty');\n    this.roles.push(roleName);\n    return this;\n  }\n\n  public hasRole(roleNames: string[]): boolean {\n    return intersection(this.roles, roleNames).length > 0;\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport { UserResult } from '../models/UserResult';\nimport { UserRefresh } from '../models/UserRefresh';\nimport { CurrentUser } from '../models/CurrentUser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  private accessToken: string | null = null;\n  private currentUser: CurrentUser | null = null;\n\n  constructor(private httpClient: HttpClient) { }\n\n  public loginEmployee(username: string, password: string): Observable<CurrentUser> {\n\n    return this.httpClient\n      .post<UserResult>(\n        '/api/users/login',\n        { username, password, kind: 'employee' })\n      .pipe(\n        tap(userResult => {\n          this.accessToken = userResult.accessToken;\n          localStorage.refreshToken = userResult.refreshToken;\n        }),\n        map(userResult => {\n          const currentUser = new CurrentUser(userResult.username, userResult.userKind, userResult.displayName);\n          userResult.roles.forEach(role => currentUser.addRole(role));\n          return currentUser;\n        }),\n        tap(currentUser => {\n          this.currentUser = currentUser\n        }),\n      );\n  }\n\n  public refreshUser(): Observable<Observable<boolean>> {\n    return this.httpClient.get<UserRefresh>('/api/users/refresh').pipe(\n      tap(userRefresh => {\n        this.accessToken = userRefresh.accessToken;\n        localStorage.refreshToken = userRefresh.refreshToken;\n      }),\n      map(() => of(true)),\n    );\n  }\n\n  public changePassword(username: string, userKind: string, oldPassword: string, newPassword: string): Observable<{}> {\n    return this.httpClient.post<{}>(\n      '/api/users/change-password',\n      {\n        username, userKind, oldPassword, newPassword,\n      });\n  }\n\n  public getCurrentUser(): CurrentUser | null {\n    return this.currentUser;\n  }\n\n  public getAccessToken(): string | null {\n    return this.accessToken;\n  }\n\n  public getRefreshToken(): string | null {\n    return localStorage.refreshToken;\n  }\n\n  public logoutUser(): void {\n    this.accessToken = null;\n    this.currentUser = null;\n    localStorage.refreshToken = null;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { UsersService } from '../../services/users.service';\n\n@Component({\n  selector: 'app-current-user',\n  templateUrl: './current-user.component.html',\n  styleUrls: ['./current-user.component.css']\n})\nexport class CurrentUserComponent implements OnInit {\n\n  get loggedIn(): boolean {\n    return !!this.usersSvc.getCurrentUser();\n  }\n\n  get displayName(): string {\n    return this.usersSvc.getCurrentUser()?.displayName ?? '';\n  }\n\n  get username(): string {\n    return this.usersSvc.getCurrentUser()?.username ?? '';\n  }\n\n  constructor(private router: Router, private usersSvc: UsersService) { }\n\n  ngOnInit(): void {\n  }\n\n  public navigateToProfile(): Promise<boolean> {\n    return this.router.navigateByUrl('/profile');\n  }\n\n  public navigateToLogout(): Promise<boolean> {\n    return this.router.navigateByUrl('/logout');\n  }\n\n  public navigateToLogin(): Promise<boolean> {\n    return this.router.navigateByUrl('/login');\n  }\n\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { LoginForm } from '../../models/LoginForm';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.css']\n})\nexport class LoginFormComponent implements OnInit {\n\n  loginForm!: FormGroup;\n  loginFormSubmitted = false;\n\n  @Output()\n  login = new EventEmitter<LoginForm>();\n\n  @Output()\n  clear = new EventEmitter<void>();\n\n  get showLoginFormValidationSummary() {\n    return this.loginForm.invalid && this.loginFormSubmitted;\n  }\n\n  get showUsernameError() {\n    const usernameFormControl = this.loginForm.get('username');\n    return usernameFormControl!.invalid;\n  }\n\n  get showPasswordError() {\n    const passwordFormControl = this.loginForm.get('password');\n    return passwordFormControl!.invalid;\n  }\n\n  constructor(private fb: FormBuilder) { }\n\n  // username: 'adodsworth'\n  // password: 'testpass'\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['adodsworth', { validators: [Validators.required] }],\n      password: ['testpass', { validators: [Validators.required] }],\n    });\n  }\n\n  doLogin(): void {\n    this.loginFormSubmitted = true;\n    if (this.loginForm.invalid) return;\n    this.login.emit(this.loginForm!.value);\n  }\n\n  doClear(): void {\n    this.loginForm!.reset();\n    this.clear.emit();\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { UserProfile } from '../../models/UserProfile';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  @Input()\n  public userProfile: UserProfile | null = null;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\n\nimport { ICurrentUser } from '../models/CurrentUser';\n\nexport const setCurrentUser = createAction(\n  '[UserLib] Set Current User',\n  props<{ currentUser: ICurrentUser }>(),\n);\n\nexport const clearCurrentUser = createAction(\n  '[UserLib] Clear Current User',\n);\n\nexport const loginUser = createAction(\n  '[UserLib] Login User',\n  props<{ username: string, password: string }>(),\n);\n\nexport const logoutUser = createAction(\n  '[UserLib] Logout User',  \n);","import { createReducer, on } from '@ngrx/store';\n\nimport { setCurrentUser, clearCurrentUser } from '../actions/current-user.actions';\nimport { ICurrentUser } from '../models/CurrentUser';\n\nexport const initialState: Readonly<ICurrentUser> = {} as ICurrentUser;\n\nexport const currentUserReducer = createReducer(\n  initialState,\n  on(setCurrentUser, (_, { currentUser }) => currentUser),\n  on(clearCurrentUser, () => ({} as ICurrentUser)),\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { UsersService } from '../services/users.service';\nimport { of } from 'rxjs';\n\nimport { exhaustMap, mergeMap, catchError } from 'rxjs/operators';\nimport { setCurrentUser, clearCurrentUser } from '../actions/current-user.actions';\nimport { ICurrentUser } from '../models/CurrentUser';\n\nimport { setErrorMessage, clearErrorMessage } from '@t4d-wnow/shared-lib';\n\n@Injectable()\nexport class CurrentUserEffects {\n\n  logoutUser$ = createEffect(() => this.actions$.pipe(\n    ofType('[UserLib] Logout User'),\n    mergeMap(() => of(\n      clearErrorMessage(),\n      clearCurrentUser(),\n    )),\n  ));\n\n  loginUser$ = createEffect(() => this.actions$.pipe(\n    ofType('[UserLib] Login User'),\n    exhaustMap((action: { username: string,  password: string}) =>\n      this.usersSvc.loginEmployee(action.username, action.password).pipe(\n        mergeMap(() => {\n          return of(\n            setCurrentUser({ currentUser: this.usersSvc.getCurrentUser() as ICurrentUser }),\n            clearErrorMessage(),\n          );\n        }),\n        catchError((err: any) => {\n\n          if (err.status === 404) {\n            return of(\n              setErrorMessage({ errorMessage: 'Username and password not found.' }),\n              clearCurrentUser(),\n            );\n          } else {\n            return of(\n              setErrorMessage({ errorMessage: 'Unknown login error.' }),\n              clearCurrentUser(),\n            );\n          }\n\n        }),\n      )),\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private usersSvc: UsersService,\n  ) { }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MatListModule } from '@angular/material/list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { ChangePasswordFormComponent } from './components/change-password-form/change-password-form.component';\nimport { CurrentUserComponent } from './components/current-user/current-user.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\nimport { currentUserReducer } from './reducers/current-user.reducer';\nimport { CurrentUserEffects } from './effects/current-users.effects';\n\nexport const StoreFeatureModule = StoreModule.forFeature('user', { currentUser: currentUserReducer });\nexport const EffectsFeatureModule = EffectsModule.forFeature([CurrentUserEffects]);\n\n@NgModule({\n  declarations: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MatListModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    MatTableModule,\n    MatSnackBarModule,\n    StoreFeatureModule,\n    EffectsFeatureModule,\n  ],\n  exports: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n})\nexport class UserLibModule { }\n","import { createSelector } from '@ngrx/store';\n\nimport { UserLibState } from '../models/UserLibState';\n\nexport const selectCurrentUser = createSelector(\n  (state: { user: UserLibState }) => state.user.currentUser,\n  currentUser => currentUser,\n);","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { UsersService } from '../services/users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllowedRolesGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private snackBar: MatSnackBar) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot)\n    : boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n    if (!this.usersSvc.getCurrentUser()?.hasRole(route.data.roles)) {\n      const snackBarRef = this.snackBar.open(\n        `You are not allowed to navigate to the ${route.data.title}.`,\n        'Dismiss');\n      snackBarRef.onAction().subscribe(() => {\n        snackBarRef.dismiss();\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationInterceptorService implements HttpInterceptor {\n\n  constructor(private usersSvc: UsersService) { }\n\n  withAccessToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getAccessToken(),\n      ),\n    });\n  }\n\n  withRefreshToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      method: 'GET',\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getRefreshToken(),\n      ),\n    });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (req.url.endsWith('/api/users/login')) {\n      return next.handle(req);\n    }\n\n    if (req.url.endsWith('/api/users/refresh')) {\n      return next.handle(this.withRefreshToken(req));\n    }\n\n    return next.handle(this.withAccessToken(req)).pipe(\n      catchError((err, caught) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            return this.usersSvc.refreshUser()\n              .pipe(\n                switchMap(() => next.handle(this.withAccessToken(req)))\n              );\n          } else {\n            return throwError(err);\n          }\n        }\n        return caught;\n      })\n    );\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot, CanActivate,\n  RouterStateSnapshot, UrlTree, Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedInGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private router: Router) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n      if (!this.usersSvc.getCurrentUser()) {\n        return this.router.parseUrl('/login');\n      } else {\n        return true;\n      }\n\n  }\n}\n"]}