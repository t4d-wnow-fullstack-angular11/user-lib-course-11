{"version":3,"file":"t4d-wnow-user-lib.umd.js","sources":["../esm2015/projects/user-lib/src/lib/components/change-password-form/change-password-form.component.ts","../projects/user-lib/src/lib/models/CurrentUser.ts","../projects/user-lib/src/lib/services/users.service.ts","../esm2015/projects/user-lib/src/lib/components/current-user/current-user.component.ts","../esm2015/projects/user-lib/src/lib/components/login-form/login-form.component.ts","../esm2015/projects/user-lib/src/lib/components/user-profile/user-profile.component.ts","../projects/user-lib/src/lib/actions/current-user.actions.ts","../projects/user-lib/src/lib/reducers/current-user.reducer.ts","../projects/user-lib/src/lib/effects/current-users.effects.ts","../../projects/user-lib/src/lib/user-lib.module.ts","../projects/user-lib/src/lib/selectors/current-user.selectors.ts","../projects/user-lib/src/lib/services/allowed-roles-guard.service.ts","../projects/user-lib/src/lib/services/authorization-interceptor.service.ts","../projects/user-lib/src/lib/services/logged-in-guard.service.ts","../../../projects/user-lib/src/public-api.ts","../../../projects/user-lib/src/t4d-wnow-user-lib.ts"],"sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\nimport { ChangePasswordForm } from '../../models/ChangePasswordForm';\nimport { confirmValue } from '@t4d-wnow/shared-lib';\n\n@Component({\n  selector: 'app-change-password-form',\n  templateUrl: './change-password-form.component.html',\n  styleUrls: ['./change-password-form.component.css']\n})\nexport class ChangePasswordFormComponent implements OnInit {\n\n  @Output()\n  changePassword = new EventEmitter<ChangePasswordForm>();\n\n  changePasswordForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.changePasswordForm = this.fb.group({\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n    }, { validators: [confirmValue('newPassword', 'confirmPassword')] });\n  }\n\n  public doChangePassword() {\n    if (this.changePasswordForm.valid) {\n      this.changePassword.emit(this.changePasswordForm.value);\n    }\n  }\n\n}\n","import { intersection } from 'lodash-es';\n\nexport interface ICurrentUser {\n  username: string;\n  userKind: string;\n  displayName: string;\n  roles: string[];\n}\n\nexport class CurrentUser implements ICurrentUser {\n\n  public username: string;\n  public userKind: string;\n  public displayName: string;\n  public roles: string[];\n\n  constructor(username: string, userKind: string, displayName: string) {\n    this.username = username;\n    this.userKind = userKind;\n    this.displayName = displayName;\n    this.roles = [];\n  }\n\n  public addRole(roleName: string): CurrentUser {\n    if (!roleName) throw new Error('role name cannot be empty');\n    this.roles.push(roleName);\n    return this;\n  }\n\n  public hasRole(roleNames: string[]): boolean {\n    return intersection(this.roles, roleNames).length > 0;\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport { UserResult } from '../models/UserResult';\nimport { UserRefresh } from '../models/UserRefresh';\nimport { CurrentUser } from '../models/CurrentUser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  private accessToken: string | null = null;\n  private currentUser: CurrentUser | null = null;\n\n  constructor(private httpClient: HttpClient) { }\n\n  public loginEmployee(username: string, password: string): Observable<CurrentUser> {\n\n    return this.httpClient\n      .post<UserResult>(\n        '/api/users/login',\n        { username, password, kind: 'employee' })\n      .pipe(\n        tap(userResult => {\n          this.accessToken = userResult.accessToken;\n          localStorage.refreshToken = userResult.refreshToken;\n        }),\n        map(userResult => {\n          const currentUser = new CurrentUser(userResult.username, userResult.userKind, userResult.displayName);\n          userResult.roles.forEach(role => currentUser.addRole(role));\n          return currentUser;\n        }),\n        tap(currentUser => {\n          this.currentUser = currentUser\n        }),\n      );\n  }\n\n  public refreshUser(): Observable<Observable<boolean>> {\n    return this.httpClient.get<UserRefresh>('/api/users/refresh').pipe(\n      tap(userRefresh => {\n        this.accessToken = userRefresh.accessToken;\n        localStorage.refreshToken = userRefresh.refreshToken;\n      }),\n      map(() => of(true)),\n    );\n  }\n\n  public changePassword(username: string, userKind: string, oldPassword: string, newPassword: string): Observable<{}> {\n    return this.httpClient.post<{}>(\n      '/api/users/change-password',\n      {\n        username, userKind, oldPassword, newPassword,\n      });\n  }\n\n  public getCurrentUser(): CurrentUser | null {\n    return this.currentUser;\n  }\n\n  public getAccessToken(): string | null {\n    return this.accessToken;\n  }\n\n  public getRefreshToken(): string | null {\n    return localStorage.refreshToken;\n  }\n\n  public logoutUser(): void {\n    this.accessToken = null;\n    this.currentUser = null;\n    localStorage.refreshToken = null;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { UsersService } from '../../services/users.service';\n\n@Component({\n  selector: 'app-current-user',\n  templateUrl: './current-user.component.html',\n  styleUrls: ['./current-user.component.css']\n})\nexport class CurrentUserComponent implements OnInit {\n\n  get loggedIn(): boolean {\n    return !!this.usersSvc.getCurrentUser();\n  }\n\n  get displayName(): string {\n    return this.usersSvc.getCurrentUser()?.displayName ?? '';\n  }\n\n  get username(): string {\n    return this.usersSvc.getCurrentUser()?.username ?? '';\n  }\n\n  constructor(private router: Router, private usersSvc: UsersService) { }\n\n  ngOnInit(): void {\n  }\n\n  public navigateToProfile(): Promise<boolean> {\n    return this.router.navigateByUrl('/profile');\n  }\n\n  public navigateToLogout(): Promise<boolean> {\n    return this.router.navigateByUrl('/logout');\n  }\n\n  public navigateToLogin(): Promise<boolean> {\n    return this.router.navigateByUrl('/login');\n  }\n\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { LoginForm } from '../../models/LoginForm';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.css']\n})\nexport class LoginFormComponent implements OnInit {\n\n  loginForm!: FormGroup;\n  loginFormSubmitted = false;\n\n  @Output()\n  login = new EventEmitter<LoginForm>();\n\n  @Output()\n  clear = new EventEmitter<void>();\n\n  get showLoginFormValidationSummary() {\n    return this.loginForm.invalid && this.loginFormSubmitted;\n  }\n\n  get showUsernameError() {\n    const usernameFormControl = this.loginForm.get('username');\n    return usernameFormControl!.invalid;\n  }\n\n  get showPasswordError() {\n    const passwordFormControl = this.loginForm.get('password');\n    return passwordFormControl!.invalid;\n  }\n\n  constructor(private fb: FormBuilder) { }\n\n  // username: 'adodsworth'\n  // password: 'testpass'\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['adodsworth', { validators: [Validators.required] }],\n      password: ['testpass', { validators: [Validators.required] }],\n    });\n  }\n\n  doLogin(): void {\n    this.loginFormSubmitted = true;\n    if (this.loginForm.invalid) return;\n    this.login.emit(this.loginForm!.value);\n  }\n\n  doClear(): void {\n    this.loginForm!.reset();\n    this.clear.emit();\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { UserProfile } from '../../models/UserProfile';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  @Input()\n  public userProfile: UserProfile | null = null;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\n\nimport { ICurrentUser } from '../models/CurrentUser';\n\nexport const setCurrentUser = createAction(\n  '[UserLib] Set Current User',\n  props<{ currentUser: ICurrentUser }>(),\n);\n\nexport const clearCurrentUser = createAction(\n  '[UserLib] Clear Current User',\n);\n\nexport const loginUser = createAction(\n  '[UserLib] Login User',\n  props<{ username: string, password: string }>(),\n);\n\nexport const logoutUser = createAction(\n  '[UserLib] Logout User',  \n);","import { createReducer, on } from '@ngrx/store';\n\nimport { setCurrentUser, clearCurrentUser } from '../actions/current-user.actions';\nimport { ICurrentUser } from '../models/CurrentUser';\n\nexport const initialState: Readonly<ICurrentUser> = {} as ICurrentUser;\n\nexport const currentUserReducer = createReducer(\n  initialState,\n  on(setCurrentUser, (_, { currentUser }) => currentUser),\n  on(clearCurrentUser, () => ({} as ICurrentUser)),\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { UsersService } from '../services/users.service';\nimport { of } from 'rxjs';\n\nimport { exhaustMap, mergeMap, catchError } from 'rxjs/operators';\nimport { setCurrentUser, clearCurrentUser } from '../actions/current-user.actions';\nimport { ICurrentUser } from '../models/CurrentUser';\n\nimport { setErrorMessage, clearErrorMessage } from '@t4d-wnow/shared-lib';\n\n@Injectable()\nexport class CurrentUserEffects {\n\n  logoutUser$ = createEffect(() => this.actions$.pipe(\n    ofType('[UserLib] Logout User'),\n    mergeMap(() => of(\n      clearErrorMessage(),\n      clearCurrentUser(),\n    )),\n  ));\n\n  loginUser$ = createEffect(() => this.actions$.pipe(\n    ofType('[UserLib] Login User'),\n    exhaustMap((action: { username: string,  password: string}) =>\n      this.usersSvc.loginEmployee(action.username, action.password).pipe(\n        mergeMap(() => {\n          return of(\n            setCurrentUser({ currentUser: this.usersSvc.getCurrentUser() as ICurrentUser }),\n            clearErrorMessage(),\n          );\n        }),\n        catchError((err: any) => {\n\n          if (err.status === 404) {\n            return of(\n              setErrorMessage({ errorMessage: 'Username and password not found.' }),\n              clearCurrentUser(),\n            );\n          } else {\n            return of(\n              setErrorMessage({ errorMessage: 'Unknown login error.' }),\n              clearCurrentUser(),\n            );\n          }\n\n        }),\n      )),\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private usersSvc: UsersService,\n  ) { }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MatListModule } from '@angular/material/list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { ChangePasswordFormComponent } from './components/change-password-form/change-password-form.component';\nimport { CurrentUserComponent } from './components/current-user/current-user.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\nimport { currentUserReducer } from './reducers/current-user.reducer';\nimport { CurrentUserEffects } from './effects/current-users.effects';\n\nexport const StoreFeatureModule = StoreModule.forFeature('user', { currentUser: currentUserReducer });\nexport const EffectsFeatureModule = EffectsModule.forFeature([CurrentUserEffects]);\n\n@NgModule({\n  declarations: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MatListModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    MatTableModule,\n    MatSnackBarModule,\n    StoreFeatureModule,\n    EffectsFeatureModule,\n  ],\n  exports: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n})\nexport class UserLibModule { }\n","import { createSelector } from '@ngrx/store';\n\nimport { UserLibState } from '../models/UserLibState';\n\nexport const selectCurrentUser = createSelector(\n  (state: { user: UserLibState }) => state.user.currentUser,\n  currentUser => currentUser,\n);","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { UsersService } from '../services/users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllowedRolesGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private snackBar: MatSnackBar) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot)\n    : boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n    if (!this.usersSvc.getCurrentUser()?.hasRole(route.data.roles)) {\n      const snackBarRef = this.snackBar.open(\n        `You are not allowed to navigate to the ${route.data.title}.`,\n        'Dismiss');\n      snackBarRef.onAction().subscribe(() => {\n        snackBarRef.dismiss();\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationInterceptorService implements HttpInterceptor {\n\n  constructor(private usersSvc: UsersService) { }\n\n  withAccessToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getAccessToken(),\n      ),\n    });\n  }\n\n  withRefreshToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      method: 'GET',\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getRefreshToken(),\n      ),\n    });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (req.url.endsWith('/api/users/login')) {\n      return next.handle(req);\n    }\n\n    if (req.url.endsWith('/api/users/refresh')) {\n      return next.handle(this.withRefreshToken(req));\n    }\n\n    return next.handle(this.withAccessToken(req)).pipe(\n      catchError((err, caught) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            return this.usersSvc.refreshUser()\n              .pipe(\n                switchMap(() => next.handle(this.withAccessToken(req)))\n              );\n          } else {\n            return throwError(err);\n          }\n        }\n        return caught;\n      })\n    );\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot, CanActivate,\n  RouterStateSnapshot, UrlTree, Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedInGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private router: Router) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n      if (!this.usersSvc.getCurrentUser()) {\n        return this.router.parseUrl('/login');\n      } else {\n        return true;\n      }\n\n  }\n}\n","/*\n * Public API Surface of user-lib\n */\n\nexport * from './lib/user-lib.module';\n\nexport * from './lib/actions/current-user.actions';\nexport * from './lib/selectors/current-user.selectors';\n\nexport * from './lib/components/change-password-form/change-password-form.component';\nexport * from './lib/components/current-user/current-user.component';\nexport * from './lib/components/login-form/login-form.component';\nexport * from './lib/components/user-profile/user-profile.component';\n\nexport * from './lib/models/UserLibState';\nexport * from './lib/models/ChangePasswordForm';\nexport * from './lib/models/CurrentUser';\nexport * from './lib/models/LoginForm';\nexport * from './lib/models/UserProfile';\nexport * from './lib/models/UserRefresh';\nexport * from './lib/models/UserResult';\n\nexport * from './lib/services/allowed-roles-guard.service';\nexport * from './lib/services/authorization-interceptor.service';\nexport * from './lib/services/logged-in-guard.service';\nexport * from './lib/services/users.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CurrentUserEffects as ɵc} from './lib/effects/current-users.effects';\nexport {currentUserReducer as ɵb,initialState as ɵa} from './lib/reducers/current-user.reducer';"],"names":["EventEmitter","confirmValue","Component","FormBuilder","Output","intersection","tap","map","of","Injectable","HttpClient","Router","Validators","Input","createAction","props","createReducer","on","createEffect","ofType","mergeMap","clearErrorMessage","exhaustMap","catchError","setErrorMessage","Actions","StoreModule","EffectsModule","NgModule","CommonModule","ReactiveFormsModule","HttpClientModule","MatListModule","MatToolbarModule","MatSidenavModule","MatButtonModule","MatIconModule","MatCardModule","MatFormFieldModule","MatInputModule","MatMenuModule","MatTableModule","MatSnackBarModule","createSelector","MatSnackBar","HttpErrorResponse","switchMap","throwError"],"mappings":"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"}